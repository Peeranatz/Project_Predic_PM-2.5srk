from dash import Dash, dcc, html
import dash_bootstrap_components as dbc
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ Dash
app = Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP, "style.css"])


# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
def create_map():
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
    df = pd.DataFrame(
        {
            "lat": [
                9.135369739503975,
                7.020309167422308,
                6.978699681363061,
                7.005287444298349,
            ],  # ‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
            "lon": [
                99.33177228415428,
                100.47099961070477,
                100.48087891070438,
                100.46776709950608,
            ],  # ‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
            "id": ["JSPS001", "JSPS014", "JSPS016", "JSPS018"],  # ID ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
        }
    )

    # ‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏∏‡∏î
    colors = ["red", "blue", "green", "purple"]

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ go.Scattermapbox
    fig = go.Figure()

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
    for i, row in df.iterrows():
        fig.add_trace(
            go.Scattermapbox(
                lat=[row["lat"]],
                lon=[row["lon"]],
                mode="markers+text",
                marker=dict(
                    size=15,  # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏∏‡∏î
                    color=colors[i],  # ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏∏‡∏î
                    symbol="circle",  # ‡∏£‡∏π‡∏õ‡∏ó‡∏£‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏∏‡∏î
                ),
                text=[row["id"]],  # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á ID ‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
                textposition="top right",  # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                hoverinfo="text",  # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ hover
                name=row["id"],  # ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
            )
        )

    # ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á layout ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
    fig.update_layout(
        mapbox=dict(
            style="open-street-map",  # ‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
            center=dict(
                lat=7.005287444298349, lon=100.46776709950608
            ),  # ‡∏à‡∏∏‡∏î‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
            zoom=8,  # ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡∏π‡∏°
        ),
        margin=dict(l=0, r=0, t=0, b=0),  # ‡∏£‡∏∞‡∏¢‡∏∞‡∏Ç‡∏≠‡∏ö
        showlegend=False,  # ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á legend
    )

    return dcc.Graph(
        id="sensor_map",
        figure=fig,
        style={"height": "600px", "width": "100%"},  # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
    )


# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏™‡∏µ‡∏î‡∏≥)
def create_initial_graph():
    fig = go.Figure()
    fig.update_layout(
        template="plotly_dark",
        xaxis_title="Date",
        yaxis_title="PM2.5 (¬µg/m¬≥)",
        title="PM2.5 Forecast",
        title_font_size=20,
        title_x=0.5,
        plot_bgcolor="var(--secondary-color)",
        paper_bgcolor="var(--secondary-color)",
        font_color="var(--text-color)",
    )
    return fig


# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° (‡πÄ‡∏û‡∏¥‡πà‡∏° Dropdown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà)
def create_controls():
    return [
        html.Label(
            "Select number of days to forecast:",
            className="mb-2 font-weight-bold important-text",
            style={"fontSize": "1.2rem"},
        ),
        html.Button(
            "Predict",
            id="predict_button",
            n_clicks=0,
            className="btn btn-primary btn-lg w-100 custom-button",
        ),
    ]


# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå)
def create_prediction_cards(predicted_values):
    cards = []
    for i, value in enumerate(predicted_values):
        card = dbc.Card(
            dbc.CardBody(
                [
                    html.H4(
                        f"Day {i+1}",
                        className="card-title",
                        style={"color": "var(--primary-color)"},
                    ),
                    html.P(
                        f"PM2.5: {value:.2f} ¬µg/m¬≥",
                        className="card-text",
                        style={"color": "var(--primary-color)"},
                    ),
                ]
            ),
            className="m-2 prediction-card",
            style={"width": "18%", "display": "inline-block"},
        )
        cards.append(card)
    return cards


def create_layout():
    return dbc.Container(
        [
            # ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß
            html.Div(className="background-effect"),
            # Header
            dbc.Row(
                dbc.Col(
                    html.Div(
                        html.H1(
                            "üåç PM2.5 WATCHER",
                            className="text-center font-weight-bold important-text custom-header",
                            style={"color": "var(--background-color)"},
                        ),
                    ),
                    width=12,
                    className="mb-4",
                )
            ),
            # ‡πÅ‡∏ñ‡∏ß‡∏´‡∏•‡∏±‡∏Å (‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≤‡∏ü)
            dbc.Row(
                [
                    # ‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢: ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà (‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á)
                    dbc.Col(
                        dbc.Card(
                            dbc.CardBody(
                                create_map(),
                                style={
                                    "height": "400px",
                                    "overflow": "hidden",
                                },  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
                            ),
                            className="mb-4 custom-card",
                        ),
                        width=4,  # ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å 6 ‡πÄ‡∏õ‡πá‡∏ô 4
                    ),
                    # ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤: ‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≤‡∏ü (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á)
                    dbc.Col(
                        dbc.Card(
                            dbc.CardBody(
                                [
                                    # ‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
                                    html.Div(
                                        [
                                            html.Label(
                                                "Select number of days to forecast:",
                                                className="mb-2 font-weight-bold important-text",
                                                style={
                                                    "fontSize": "1.2rem",
                                                    "color": "var(--text-color)",
                                                },
                                            ),
                                            dcc.RadioItems(
                                                id="days_radio",
                                                options=[
                                                    {"label": "7 Days", "value": 7},
                                                    {"label": "14 Days", "value": 14},
                                                ],
                                                value=7,  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
                                                inline=True,
                                                className="mb-4 dcc_radio_items",
                                                style={"color": "var(--text-color)"},
                                            ),
                                            html.Button(
                                                "Predict",
                                                id="predict_button",
                                                n_clicks=0,
                                                className="btn btn-primary btn-lg w-100 custom-button",
                                            ),
                                        ],
                                        style={"marginBottom": "30px"},
                                    ),
                                    # ‡∏Å‡∏£‡∏≤‡∏ü (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á)
                                    dcc.Graph(
                                        id="pm25_graph",
                                        figure=create_initial_graph(),
                                        style={
                                            "height": "400px",
                                            "width": "100%",
                                        },  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
                                    ),
                                ]
                            ),
                            className="custom-card",
                        ),
                        width=8,  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏à‡∏≤‡∏Å 6 ‡πÄ‡∏õ‡πá‡∏ô 8
                    ),
                ],
                justify="center",
                style={"marginBottom": "30px"},
            ),
            # ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á)
            dbc.Row(
                dbc.Col(
                    html.Div(
                        id="prediction_output",
                        style={"fontSize": "1.2rem", "textAlign": "center"},
                    ),
                    width=12,
                    className="mb-4",
                )
            ),
        ],
        fluid=True,
        style={"maxWidth": "1400px", "padding": "30px"},
    )
